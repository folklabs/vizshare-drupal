<?php
/**
 * @file
 * An example field using the Field Types API.
 */


/**
 * Implementation of hook_menu().
 */
function vizshare_menu() {
  $items = array();
  $items['visualization/new'] = array(
    'title' => 'Create visualization',
    'description' => 'Create a visualization',
    // 'menu_name'       => 'main-menu',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('vizshare_submit_form'),
    'access arguments' => array('access content')
  );
  return $items;
}

function vizshare_get_viz_form() {
  return t('hello');
}

function vizshare_submit_form() {
  $form = array();
  $form['#attached']['js'] = array(
    drupal_get_path('module', 'vizshare') . '/vizbuilder/components/angular/angular.js',
    drupal_get_path('module', 'vizshare') . '/vizbuilder/components/angular-cookies/angular-cookies.js',
    drupal_get_path('module', 'vizshare') . '/vizbuilder/components/angular-resource/angular-resource.js',
    drupal_get_path('module', 'vizshare') . '/vizbuilder/components/json3/lib/json3.js',
    drupal_get_path('module', 'vizshare') . '/vizbuilder/scripts/scripts.js',
  );

  $form['divapp'] = array(
    '#markup' => '<div class="container" ng-app="vizBuilder" ng-view=""></div>',
    '#weight' => -1,
  );
  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => 'Name'
  );
  $form['last_name'] = array(
    '#type' => 'textfield',
    '#title' => 'Last Name'
  );
  $form['address'] = array(
    '#type' => 'textarea',
    '#title' => 'Your full address',
    '#description' => 'Please include aptartment number and postal code'
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Add yourself'
  );
  return $form;
}

/**
 * Implements hook_form_alter().
 */
function vizshare_form_alter(&$form, &$form_state, $form_id) {
  // dpm($form_id);
  // dpm($form);
  // dpm($form_state);
  switch ($form_id) {
    case 'vizshare_submit_form':
      dpm('found!');
      // Form modification code goes here.
            $form['divstart'] = array(
                '#value' => '<div class="container" ng-app="vizBuilder" ng-view=""></div>',
                '#weight' => -1,
            );

            $form['instruct'] = array(
                '#value' => '<p>Enter your username and password to login</p>',
                '#weight' => 0,
            );

            $form['divend'] = array(
                '#value' => '</div>',
                '#weight' => 4,
            );

            $form['contact_information'] = array(
  '#value' => variable_get('contact_form_information', t('You can leave us a message using the contact form below.')),
);
      break;
  }
  // dpm($form);
}


/**
 * @defgroup vizshare Example: Field Types API
 * @ingroup examples
 * @{
 * Examples using Field Types API.
 *
 * This is updated from Barry Jaspan's presentation at Drupalcon Paris,
 * @link http://acquia.com/community/resources/acquia-tv/intro-field-api-module-developers Video Presentation @endlink
 *
 * Providing a field requires:
 * - Defining a field:
 *   - hook_field_info()
 *   - hook_field_schema()
 *   - hook_field_validate()
 *   - hook_field_is_empty()
 *
 * - Defining a formatter for the field (the portion that outputs the field for
 *   display):
 *   - hook_field_formatter_info()
 *   - hook_field_formatter_view()
 *
 * - Defining a widget for the edit form:
 *   - hook_field_widget_info()
 *   - hook_field_widget_form()
 *
 * Our module defines the field in vizshare_field_info(),
 * vizshare_field_validate() and vizshare_field_is_empty().
 * vizshare_field_schema() is implemented in vizshare.install.
 *
 * Our module sets up a formatter in vizshare_field_formatter_info() and
 * vizshare_field_formatter_view(). These are the API hooks that present
 * formatted and themed output to the user.
 *
 * And finally, our module defines the widet in
 * vizshare_field_widget_info() and vizshare_field_widget_form().
 * The widget is the form element used to receive input from the user
 * when the field is being populated.
 *
 * @see field_types
 * @see field
 */

/***************************************************************
 * Field Type API hooks
 ***************************************************************/

/**
 * Implements hook_field_info().
 *
 * Provides the description of the field.
 */
function vizshare_field_info() {
  return array(
    // We name our field as the associative name of the array.
    'vizshare_value' => array(
      'label' => t('VizShare data'),
      'description' => t('Data representation of a visualisation that can be rendered by VizShare library.'),
      'default_widget' => 'vizshare_textarea',
      'default_formatter' => 'vizshare_draw',
    ),
  );
}

/**
 * Implements hook_field_validate().
 *
 * This hook gives us a chance to validate content that's in our
 * field. We're really only interested in the $items parameter, since
 * it holds arrays representing content in the field we've defined.
 * We want to verify that the items only contain RGB hex values like
 * this: #RRGGBB. If the item validates, we do nothing. If it doesn't
 * validate, we add our own error notification to the $errors parameter.
 *
 * @see vizshare_field_widget_error()
 */
function vizshare_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  // foreach ($items as $delta => $item) {
  //   if (!empty($item['rgb'])) {
  //     if (!preg_match('@^#[0-9a-f]{6}$@', $item['rgb'])) {
  //       $errors[$field['field_name']][$langcode][$delta][] = array(
  //         'error' => 'vizshare_invalid',
  //         'message' => t('Color must be in the HTML format #abcdef.'),
  //       );
  //     }
  //   }
  // }
}


/**
 * Implements hook_field_is_empty().
 *
 * hook_field_is_emtpy() is where Drupal asks us if this field is empty.
 * Return TRUE if it does not contain data, FALSE if it does. This lets
 * the form API flag an error when required fields are empty.
 */
function vizshare_field_is_empty($item, $field) {
  return empty($item['value']);
}

/**
 * Implements hook_field_formatter_info().
 *
 * We need to tell Drupal that we have two different types of formatters
 * for this field. One will change the text color, and the other will
 * change the background color.
 *
 * @see vizshare_field_formatter_view()
 */
function vizshare_field_formatter_info() {
  dpm('vizshare_field_formatter_info');
  return array(
    // This formatter just displays the hex value in the color indicated.
    'vizshare_draw' => array(
      'label' => t('Visualisation renderer'),
      'field types' => array('vizshare_value'),
    ),
  //   // This formatter changes the background color of the content region.
  //   'vizshare_color_background' => array(
  //     'label' => t('Change the background of the output text'),
  //     'field types' => array('vizshare_rgb'),
  //   ),
  );
}

/**
 * Implements hook_field_formatter_view().
 *
 *
 * @see vizshare_field_formatter_info()
 */
function vizshare_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  dpm('vizshare_field_formatter_view ');
  // kpr($display);
  // kpr($items);
  drupal_add_js(drupal_get_path('module', 'vizshare') .'/d3.js', array('weight' => 1));
  drupal_add_js(drupal_get_path('module', 'vizshare') .'/vega.js', array('weight' => 2));
  drupal_add_js(drupal_get_path('module', 'vizshare') .'/vizshare-0.1.0.js', array('weight' => 3));
  drupal_add_js(drupal_get_path('module', 'vizshare') .'/vizshare-renderers-0.1.0.js', array('weight' => 4));
  drupal_add_js(drupal_get_path('module', 'vizshare') .'/vizshare.drupal.js', array('weight' => 5));

  $element = array();

  switch ($display['type']) {
    // This formatter simply outputs the field as text and with a color.
    case 'vizshare_draw':
      dpm('vizshare_draw ');
      foreach ($items as $delta => $viz) {
        dpm($viz);

        $viz_id = drupal_html_id('vizshare_viz');
        // $build = array(
        //   '#theme' => 'html_tag',
        //   '#tag' => 'div',
        //   '#value' => '',
        //   '#attributes' => array(
        //     'id' => $viz_id,
        //     // 'style' => 'height: ' . $height,
        //   ),
        // );
        $element[$delta] = array(
          // We create a render array to produce the desired markup,
          // "<p style="color: #hexcolor">The color code ... #hexcolor</p>".
          // See theme_html_tag().
          '#type' => 'html_tag',
          '#tag' => 'div',
          '#attributes' => array(
            'style' => 'color: #f00',
            'id' => $viz_id
          ),
          // '#value' => t('The color code in this field is @code', array('@code' => $item['value'])),
          // '#value' => $viz['value'],
        );

        $settings = array(
          'vizId' => $viz_id,
          'viz' => $viz['value'],
          // 'features' => $features,
        );
        // drupal_alter('leaflet_map_prebuild', $settings);

        $element[$delta]['#attached']['js'][] = array(
          'data' => array('vizshare' => array($settings)),
          'type' => 'setting',
        );


      }
      break;

  //   // This formatter adds css to the page changing the '.region-content' area's
  //   // background color. If there are many fields, the last one will win.
  //   case 'vizshare_color_background':
  //     foreach ($items as $delta => $item) {
  //       $element[$delta] = array(
  //         '#type' => 'html_tag',
  //         '#tag' => 'p',
  //         '#value' => t('The content area color has been changed to @code', array('@code' => $item['rgb'])),
  //         '#attached' => array(
  //           'css' => array(
  //             array(
  //               'data' => 'div.region-content { background-color:' . $item['rgb'] . ';}',
  //               'type' => 'inline',
  //             ),
  //           ),
  //         ),
  //       );
  //     }
  //     break;
  }
  dpm('element:');
  dpm($element);
  return $element;
}

/**
 * Implements hook_field_widget_info().
 *
 * Three widgets are provided.
 * - A simple text-only widget where the user enters the '#ffffff'.
 * - A 3-textfield widget that gathers the red, green, and blue values
 *   separately.
 * - A farbtastic colorpicker widget that chooses the value graphically.
 *
 * These widget types will eventually show up in hook_field_widget_form,
 * where we will have to flesh them out.
 *
 * @see vizshare_field_widget_form()
 */
function vizshare_field_widget_info() {
  return array(
    'vizshare_textarea' => array(
      'label' => t('Text area'),
      'field types' => array('vizshare_value'),
    ),
    // 'vizshare_3text' => array(
    //   'label' => t('RGB text field'),
    //   'field types' => array('vizshare_rgb'),
    // ),
    // 'vizshare_colorpicker' => array(
    //   'label' => t('Color Picker'),
    //   'field types' => array('vizshare_rgb'),
    // ),
  );
}

/**
 * Implements hook_field_widget_form().
 *
 * hook_widget_form() is where Drupal tells us to create form elements for
 * our field's widget.
 *
 * We provide one of three different forms, depending on the widget type of
 * the Form API item provided.
 *
 * The 'vizshare_colorpicker' and 'vizshare_text' are essentially
 * the same, but vizshare_colorpicker adds a javascript colorpicker
 * helper.
 *
 * vizshare_3text displays three text fields, one each for red, green,
 * and blue. However, the field type defines a single text column,
 * rgb, which needs an HTML color spec. Define an element validate
 * handler that converts our r, g, and b fields into a simulated single
 * 'rgb' form element.
 */
function vizshare_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  dpm($items);
  dpm($delta);
  $value = isset($items[$delta]['value']) ? $items[$delta]['value'] : '';

  $widget = $element;
  $widget['#delta'] = $delta;

  switch ($instance['widget']['type']) {

    // case 'vizshare_colorpicker':
    //   $widget += array(
    //     '#suffix' => '<div class="field-example-colorpicker"></div>',
    //     '#attributes' => array('class' => array('edit-field-example-colorpicker')),
    //     '#attached' => array(
    //       // Add Farbtastic color picker.
    //       'library' => array(
    //         array('system', 'farbtastic'),
    //       ),
    //       // Add javascript to trigger the colorpicker.
    //       'js' => array(drupal_get_path('module', 'vizshare') . '/vizshare.js'),
    //     ),
    //   );
      // DELIBERATE fall-through: From here on the vizshare_text and
      // vizshare_colorpicker are exactly the same.
    case 'vizshare_textarea':
      $widget += array(
        '#type' => 'textarea',
        '#default_value' => $value,
        // Allow a slightly larger size that the field length to allow for some
        // configurations where all characters won't fit in input field.
        // '#size' => 7,
        // '#maxlength' => 7,
      );
      break;

    // case 'vizshare_3text':
    //   // Convert rgb value into r, g, and b for #default_value.
    //   if (!empty($value)) {
    //     preg_match_all('@..@', substr($value, 1), $match);
    //   }
    //   else {
    //     $match = array(array());
    //   }

      // // Make this a fieldset with the three text fields.
      // $widget += array(
      //   '#type' => 'fieldset',
      //   '#element_validate' => array('vizshare_3text_validate'),

      //   // #delta is set so that the validation function will be able
      //   // to access external value information which otherwise would be
      //   // unavailable.
      //   '#delta' => $delta,

      //   '#attached' => array(
      //     'css' => array(drupal_get_path('module', 'vizshare') . '/vizshare.css'),
      //   ),
      // );

      // // Create a textfield for saturation values for Red, Green, and Blue.
      // foreach (array('r' => t('Red'), 'g' => t('Green'), 'b' => t('Blue')) as $key => $title) {
      //   $widget[$key] = array(
      //     '#type' => 'textfield',
      //     '#title' => $title,
      //     '#size' => 2,
      //     '#default_value' => array_shift($match[0]),
      //     '#attributes' => array('class' => array('rgb-entry')),
      //     '#description' => t('The 2-digit hexadecimal representation of @color saturation, like "a1" or "ff"', array('@color' => $title)),
      //   );
      //   // Since Form API doesn't allow a fieldset to be required, we
      //   // have to require each field element individually.
      //   if ($instance['required'] == 1) {
      //     $widget[$key]['#required'] = 1;
      //   }
      // }
      // break;

  }

  $element['value'] = $widget;
  return $element;
}


// /**
//  * Validate the individual fields and then convert to RGB string.
//  */
// function vizshare_3text_validate($element, &$form_state) {
//   // @todo: Isn't there a better way to find out which element?
//   $delta = $element['#delta'];
//   $field = $form_state['field'][$element['#field_name']][$element['#language']]['field'];
//   $field_name = $field['field_name'];
//   if (isset($form_state['values'][$field_name][$element['#language']][$delta]['rgb'])) {
//     $values = $form_state['values'][$field_name][$element['#language']][$delta]['rgb'];
//     foreach (array('r', 'g', 'b') as $colorfield) {
//       $colorfield_value = hexdec($values[$colorfield]);
//       // If they left any empty, we'll set the value empty and quit.
//       if (strlen($values[$colorfield]) == 0) {
//         form_set_value($element, '', $form_state);
//         return;
//       }
//       // If they gave us anything that's not hex, reject it.
//       if ((strlen($values[$colorfield]) != 2) || $colorfield_value < 0 || $colorfield_value > 255) {
//         form_error($element[$colorfield], t("Saturation value must be a 2-digit hexadecimal value between 00 and ff."));
//       }
//     }

//     $value = sprintf('#%02s%02s%02s', $values['r'], $values['g'], $values['b']);
//     form_set_value($element, $value, $form_state);
//   }
// }

/**
 * Implements hook_field_widget_error().
 *
 * hook_field_widget_error() lets us figure out what to do with errors
 * we might have generated in hook_field_validate(). Generally, we'll just
 * call form_error().
 *
 * @see vizshare_field_validate()
 * @see form_error()
 */
function vizshare_field_widget_error($element, $error, $form, &$form_state) {
  switch ($error['error']) {
    case 'vizshare_invalid':
      form_error($element, $error['message']);
      break;
  }
}

/**
 * Implements hook_menu().
 *
 * Provides a simple user interface that tells the developer where to go.
 */
// function vizshare_menu() {
//   $items['vizbuilder/save'] = array(
//     'title' => 'save visualisation',
//     'type'=> MENU_CALLBACK,
//     //our custom ajax callback
//     'page callback' => 'vizshare_save_ajax_callback',
//     //access to user can access content in a site, you can define your own permission using hook_perm()
//     'access arguments' => array('access content'),
//   );
//   return $items;
// }

function vizshare_save_ajax_callback(){

  //retrieve our post value

  $name = $_POST['name'];

  dpm($name);

  //database query executed succefully ,return 'success' message
  if($data){
        // Return json
        drupal_json_output("success");
   }else{
       // Return json
        drupal_json_output("fail");

   }

}

// /**
//  * A simple page to explain to the developer what to do.
//  */
// function _vizshare_page() {
//   return t("The Field Example provides a field composed of an HTML RGB value, like #ff00ff. To use it, add the field to a content type.");
// }
/**
 * @} End of "defgroup vizshare".
 */
